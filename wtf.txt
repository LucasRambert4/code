//pour ajouter une classe
document.getElementById('classForm')?.addEventListener('submit', function (e) {
    e.preventDefault();
    const className = document.getElementById('className').value;

    // Envoyer la requête POST pour ajouter une classe
    fetch('/classes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: className })
    })
    .then(response => {
        if (!response.ok) throw new Error('Erreur lors de l\'ajout de la classe');
        return response.json();
    })
    .then(data => {
        console.log('Classe ajoutée:', data);
        loadClasses(); // Recharger la liste des classes
        document.getElementById('classForm').reset(); // Réinitialiser le formulaire
        location.reload(); // Rafraîchir la page
    })
    .catch(error => console.error('Erreur:', error));
});
//pour ajouter un etudiant
document.getElementById('studentForm')?.addEventListener('submit', function (e) {
    e.preventDefault();
    const name = document.getElementById('name').value;
    const classId = document.getElementById('classDropdown').value;

    fetch('/students', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, classId })
    })
    .then(response => {
        if (!response.ok) throw new Error('Erreur lors de l\'ajout de l\'étudiant');
        return response.json();
    })
    .then(data => {
        console.log('Étudiant ajouté:', data);
        loadStudents(); // Recharger la liste des étudiants
        document.getElementById('studentForm').reset(); // Réinitialiser le formulaire
        closeModal(); // Fermer le modal après l'enregistrement réussi
    })
    .catch(error => console.error('Erreur:', error));
});




//pour supprimer un etudiant
function deleteStudent(studentId) {
    if (!confirm('Êtes-vous sûr de vouloir supprimer cet étudiant ?')) {
        return; // Annule la suppression si l'utilisateur ne confirme pas
    }

    fetch(`/students/${studentId}`, { method: 'DELETE' })
        .then(response => {
            if (!response.ok) throw new Error('Erreur lors de la suppression de l\'étudiant');
            loadStudents(); // Recharger la liste des étudiants
        })
        .catch(error => console.error('Erreur:', error));
}
//pour supprimer une classe
function deleteClass(classId) {
    if (!confirm('Êtes-vous sûr de vouloir supprimer cette classe ?')) {
        return; // Annule la suppression si l'utilisateur ne confirme pas
    }

    fetch(`/classes/${classId}`, {
        method: 'DELETE', // Utilise la méthode DELETE
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Erreur lors de la suppression de la classe');
        }
        // Recharger les classes après suppression
        loadClasses(); // Recharger la liste pour afficher les changements
    })
    .catch(error => console.error('Erreur:', error));
}
//pour charger les classes dans un dropdown
function loadClassesInDropdown(dropdown) {
    dropdown.innerHTML = '';
    fetch('/classes')
        .then(response => {
            if (!response.ok) throw new Error('Erreur lors du chargement des classes');
            return response.json();
        })
        .then(data => {
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Sélectionner une classe';
            dropdown.appendChild(defaultOption);
            data.forEach(cls => {
                const option = document.createElement('option');
                option.value = cls.id;
                option.textContent = cls.name;
                dropdown.appendChild(option);
            });
        })
        .catch(error => console.error('Erreur:', error));
}



//pour charger les classes
function loadClasses() {
    fetch('/classes')
        .then(response => {
            if (!response.ok) throw new Error('Erreur lors du chargement des classes');
            return response.json();
        })
        .then(data => {
            const classList = document.getElementById('classList');
            if (classList) {
                classList.innerHTML = ''; // Clear the list before populating
                data.forEach(cls => {
                    const li = document.createElement('li');
                    li.innerHTML = `
                        ${cls.name}
                        <button onclick="editClass(${cls.id}, '${cls.name}')" aria-label="Modifier la classe ${cls.name}">Modifier</button>
                        <button onclick="deleteClass(${cls.id})" aria-label="Supprimer la classe ${cls.name}">Supprimer</button>`;
                    classList.appendChild(li);
                });
            }
        })
        .catch(error => console.error('Erreur:', error));
}
//pour charger les etudiants
function loadStudents() {
    fetch('/students')
        .then(response => {
            if (!response.ok) throw new Error('Erreur lors du chargement des étudiants');
            return response.json(); // Change to JSON
        })
        .then(data => {
            const studentList = document.getElementById('studentList');
            if (!studentList) return;
            studentList.innerHTML = ''; // Clear the list before populating
            data.forEach(student => {
                const li = document.createElement('li');
                li.innerHTML = `
                    ${student.name} - Classe: ${student.className} 
                    <button onclick="editStudent(${student.id}, '${student.name}', ${student.classId})" aria-label="Modifier l'étudiant ${student.name}">Modifier</button> 
                    <button onclick="deleteStudent(${student.id})" aria-label="Supprimer l'étudiant ${student.name}">Supprimer</button>`;
                studentList.appendChild(li);
            });
        })
        .catch(error => console.error('Erreur:', error));
}
// Fonction pour ouvrir le formulaire de modification d'une classe
function editClass(classId, currentName) {
    const newName = prompt('Modifier le nom de la classe:', currentName);
    if (newName) {
        fetch(`/classes/${classId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newName })
        })
        .then(response => {
            if (!response.ok) throw new Error('Erreur lors de la modification de la classe');
            loadClasses(); // Recharger les classes après modification
        })
        .catch(error => console.error('Erreur:', error));
    }
}
// Fonction pour ouvrir le formulaire de modification d'un étudiant
function editStudent(studentId, currentName, currentClassId) {
    const newName = prompt('Modifier le nom de l\'étudiant:', currentName);
    const newClassId = prompt('Modifier l\'ID de la classe:', currentClassId);

    if (newName && newClassId) {
        fetch(`/students/${studentId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newName, classId: newClassId })
        })
        .then(response => {
            if (!response.ok) throw new Error('Erreur lors de la modification de l\'étudiant');
            loadStudents(); // Recharger les étudiants après modification
        })
        .catch(error => console.error('Erreur:', error));
    }
}



//pour activer les fonctions
window.onload = () => {
    loadStudents();
    loadClasses();
};